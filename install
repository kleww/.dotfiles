#!/bin/bash
# URL: https://github.com/kleww/.dotfiles
# Author: Kevin Viricel
# Description: This script install all dotfiles on the current system

# Globals
BINARY_PATH=""
BACKUP_DIR_NAME="backup"
VUNDLE_REPOSITORY="https://github.com/VundleVim/Vundle.vim.git"
VUNDLE_INSTALL_PATH="$HOME/.vim/bundle/Vundle.vim"
VUNDLE_BUNDLE_PATH="$HOME/.vim/bundle"

################################################################################
# Resolve binary path even if there are symlinks and setup BINARY_PATH global  #
# Globals:                                                                     #
#   BINARY_PATH                                                                #
# Arguments:                                                                   #
#   None                                                                       #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
function _get_binary_path() {
  local source="${BASH_SOURCE[0]}"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  BINARY_PATH="$( cd -P "$( dirname "$source" )" && pwd )"
}

################################################################################
# Check if all required programs are installer and can be reach by this script #
# Globals:                                                                     #
#   None                                                                       #
# Arguments:                                                                   #
#   None                                                                       #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
function _check_required_programs() {
  local req_progs=(readlink date)
  for p in ${req_progs[@]}; do
    hash "${p}" 2>&- || \
    { echo >&2 " Required program \"${p}\" not installed or in search PATH.";
    exit 1;
  }
done
}

################################################################################
# Prompt user for confimation                                                  #
# Globals:                                                                     #
#   None                                                                       #
# Arguments:                                                                   #
#   None                                                                       #
# Returns:                                                                     #
#   0 if user accept                                                           #
#   1 if user refuse                                                           #
################################################################################
function _confirm() {
  while true; do
    read -p "$1 [Y/n]" yn
    case $yn in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
    esac
  done
}

_backup_file() {
  local backup
  local date=`date +%Y-%m-%d:%H:%M:%S`
  if [ ! -d $BINARY_PATH/$BACKUP_DIR_NAME ];then
    echo "Creating backup directory: $BINARY_PATH/$BACKUP_DIR_NAME..."
    mkdir -p $BINARY_PATH/$BACKUP_DIR_NAME || exit 1
    echo "==>...DONE"
  fi
  read -p "Enter backup filename:($date-$1)" backup
  backup=${backup:-$date-$1}
  cp $HOME/$1 $BINARY_PATH/$BACKUP_DIR_NAME/$backup && echo "==>Backup created"
}

_import_dotfiles() {
  local dotfiles=".bash_profile .bashrc .vimrc"
  for file in $dotfiles; do
    if  _confirm "Do you want to import $file?";then
      if [ -f $HOME/$file ];then
        if _confirm "$HOME/$file already exist. Do you want to replace it?";then
          if _confirm "Do you want to back up the old file ?";then
            _backup_file $file
          fi
          ln -fhs $BINARY_PATH/$file $HOME/$file && echo "==>Symlink created"
        fi
      else
        ln -fhs $BINARY_PATH/$file $HOME/$file && echo "==>Symlink created"
      fi
    fi
  done
}

_install_vundle() {
  if [ -d $VUNDLE_INSTALL_PATH ];then
    if _confirm "Vundle already install. Do you want to replace it?";then
      rm -rf $VUNDLE_BUNDLE_PATH && echo "==>Remove Vundle"
      git clone $VUNDLE_REPOSITORY $VUNDLE_INSTALL_PATH &&\
      echo "==>Vundle installed"
    fi
  else
    git clone $VUNDLE_REPOSITORY $VUNDLE_INSTALL_PATH &&\
    echo "==>Vundle installed"
  fi
}

_install_vundle_plugins() {
  vim +PluginInstall +qall
}

function main() {
  _check_required_programs
  _get_binary_path


  _confirm "Do you want to import dotfiles" && _import_dotfiles
  _confirm "Do you want to install Vundle?" && _install_vundle
  _confirm "Do you want to install Vundle plugins?" && _install_vundle_plugins
}

main "$@"
